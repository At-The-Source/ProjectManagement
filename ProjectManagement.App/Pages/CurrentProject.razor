@page "/currentproject/{projectid:guid}"
@using Services
@using Contracts
@using ViewModels
@inject NavigationManager NavigationManager
@inject IProjectDataService ProjectDataService

@if (Projects == null)
{
    <p>Loading tasks...</p>
}
else
{
    <button class="btn btn-success mb-2" @onclick="AddTask">Add task</button>
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col"></th>
                <th scope="col">Task name</th>
                <th scope="col">Description</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proj in Projects)
            {
                if (proj.ProjectId == ProjectId)
                {
                    foreach (var task in proj.Tasks)
                    {
                        taskAmount++;
                        <tr>
                            <th scope="row"></th>
                            <td>
                                @task.TaskName
                            </td>
                            <td>
                                @task.Description
                            </td>
                            <td>
                                <button class="btn btn-outline-success" @onclick="() => UpdateTask(task.TaskId)">Edit</button>
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
}




@code {
    [Parameter]
    public Guid? ProjectId { get; set; }

    public ICollection<ProjectTaskViewModel> Projects { get; set; }
    private int taskAmount = 0;

    protected void AddTask()
    {
        NavigationManager.NavigateTo("/AddTask");
    }
    protected void UpdateTask(Guid id)
    {
        var taskid = id.ToString();
        NavigationManager.NavigateTo("/updatetask/" + taskid);
    }

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Projects = await ProjectDataService.GetAllProjectsWithTasks();

        //Client client = new Client("https://localhost:44360");
        //Projects = await client.GetAllProjectsWithTasksAsync(false);
    }
}
