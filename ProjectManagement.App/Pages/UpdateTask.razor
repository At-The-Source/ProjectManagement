@page "/updatetask/{taskid}"
@using ProjectManagement.App.Services
@using ProjectManagement.App.Contracts
@using ProjectManagement.App.ViewModels
@inject NavigationManager NavigationManager
@inject ITaskDataService TaskDataService

<h5>Update task</h5>

<EditForm Model="@SpecificTaskViewModel" OnValidSubmit="@SubmitTaskUpdate">
    <div class="form-group">
        <label for="nameInput">Name</label>
        <InputText type="text" class="form-control" id="nameInput" @bind-Value="@SpecificTaskViewModel.TaskName"></InputText>
        <ValidationMessage For="@(() => SpecificTaskViewModel.TaskName)" />
    </div>
    <div class="form-group">
        <label for="descriptionInput">Description</label>
        <InputText type="text" class="form-control" id="descriptionInput" @bind-Value="@SpecificTaskViewModel.Description"></InputText>
        <ValidationMessage For="@(() => SpecificTaskViewModel.Description)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
    <ValidationSummary></ValidationSummary>
</EditForm>

<div>
    <button class="btn btn-danger mt-2" @onclick="DeleteTask">Delete Task</button>
</div>

@Message

@code {
    public string CurrentProjectId { get; set; }
    public SpecificTaskViewModel SpecificTaskViewModel { get; set; }
    public string Message { get; set; }

    [Parameter]
    public string TaskId { get; set; }
    private Guid CurrentTaskId = Guid.Empty;
    // [Parameter]
    // public string ProjId { get; set; }
    // private Guid CurrentProjId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        SpecificTaskViewModel = new SpecificTaskViewModel();
        if (Guid.TryParse(TaskId, out CurrentTaskId))
        {
            SpecificTaskViewModel = await TaskDataService.GetTaskById(CurrentTaskId);
        }
    }

    protected async Task SubmitTaskUpdate()
    {
        var apiResponse = await TaskDataService.UpdateTask(SpecificTaskViewModel);
        HandleApiResponse(apiResponse);
    }

    protected async Task DeleteTask()
    {
        var apiResponse = await TaskDataService.DeleteTask(CurrentTaskId);
        HandleApiResponse(apiResponse);
        // if (Guid.TryParse(ProjId, out CurrentProjId))
        // {
        //     NavigationManager.NavigateTo("/currentproject/" + CurrentProjectId);
        // }
    }
    
    private void HandleApiResponse(ApiResponse<Guid> response)
    {
        if (response.Success) { Message = "Task has been updated/deleted."; }
        else { Message = response.Message; }
    }
}
